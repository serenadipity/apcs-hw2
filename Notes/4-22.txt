Definitions:

graphs --> a collection of nodes and edges
(vertex)node --> holds stuff
edge --> connects stuff

Cyclic Graph --> can get back to node w/o retracing steps)
Acyclic Graph --> (can't get back to node w/o retracing steps)

Directed Graph --> waiting for next step

DAG --> Directed Acyclic Graph

Trees --> empty or an acyclic graph with one node designated as the root
root --> starting point
child(and parent)--> connected to end 1 level down from its parent node
leaf --> a node with 0 children
path --> the sequence of nodes and of edges connecting 2 nodes
ancestors --> any nodes on the path from you up to the root
descendants --> any nodes on your subtrees
siblings --> children of the same parent
height --> the length of the longest path to the root
fullness --> full tree has the maximum number of nodes
balance --> 

binary tree --> each node has 0, 1, or 2 children

Binary Search Tree:
       Binary tree where given the value V in any node n, all the values in n's
       left subtree are less than v and all the values in n's right subtree are
       greater than V.

public Node search(Node T, integer i) {
       while (T != null) {
       	     int c = T.getData().compareTo(i);
       	     if (c == 0) {
       	     	return T;
		}
		 else if (c > 0)
	      	       T = T.getLeft()
        }
	return null;
}

insert 
       node n = new node(i);
       if (T==null) {
       	  T = n;
	  return T;
	}
___________________________________________________________________
insert as a new leaf
1. set to to root
2. search for n but use a piggyback pointer T2 to follow T.
3. T2 now points to the new node's parent
4. Insert the new node to the left or right of T2 as appropriate.
